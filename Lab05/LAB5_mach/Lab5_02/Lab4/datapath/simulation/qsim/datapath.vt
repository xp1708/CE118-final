// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2024 13:37:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    parallel_datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module parallel_datapath_vlg_sample_tst(
	CLK,
	DATA,
	IE,
	OE,
	PASS,
	RAA,
	RBB,
	REA,
	REB,
	S,
	WA,
	WE,
	sampler_tx
);
input  CLK;
input [3:0] DATA;
input [1:0] IE;
input  OE;
input  PASS;
input [1:0] RAA;
input [1:0] RBB;
input  REA;
input  REB;
input [2:0] S;
input [1:0] WA;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DATA or IE or OE or PASS or RAA or RBB or REA or REB or S or WA or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module parallel_datapath_vlg_check_tst (
	RESULT,
	sampler_rx
);
input [3:0] RESULT;
input sampler_rx;

reg [3:0] RESULT_expected;

reg [3:0] RESULT_prev;

reg [3:0] RESULT_expected_prev;

reg [3:0] last_RESULT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	RESULT_prev = RESULT;
end

// update expected /o prevs

always @(trigger)
begin
	RESULT_expected_prev = RESULT_expected;
end


// expected RESULT[ 3 ]
initial
begin
	RESULT_expected[3] = 1'bX;
end 
// expected RESULT[ 2 ]
initial
begin
	RESULT_expected[2] = 1'bX;
end 
// expected RESULT[ 1 ]
initial
begin
	RESULT_expected[1] = 1'bX;
end 
// expected RESULT[ 0 ]
initial
begin
	RESULT_expected[0] = 1'bX;
end 
// generate trigger
always @(RESULT_expected or RESULT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RESULT = %b | ",RESULT_expected_prev);
	$display("| real RESULT = %b | ",RESULT_prev);
`endif
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module parallel_datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] DATA;
reg [1:0] IE;
reg OE;
reg PASS;
reg [1:0] RAA;
reg [1:0] RBB;
reg REA;
reg REB;
reg [2:0] S;
reg [1:0] WA;
reg WE;
// wires                                               
wire [3:0] RESULT;

wire sampler;                             

// assign statements (if any)                          
parallel_datapath i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DATA(DATA),
	.IE(IE),
	.OE(OE),
	.PASS(PASS),
	.RAA(RAA),
	.RBB(RBB),
	.REA(REA),
	.REB(REB),
	.RESULT(RESULT),
	.S(S),
	.WA(WA),
	.WE(WE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// IE
initial
begin
	IE = 1'b1;
	IE = #10000 1'b0;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b1;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b0;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b0;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b1;
end 

// WE
initial
begin
	WE = 1'b1;
	WE = #150000 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #10000 1'b1;
	WA[1] = #10000 1'b0;
	WA[1] = #10000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #10000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #10000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #10000 1'b1;
	WA[1] = #20000 1'b0;
end 
// WA[ 0 ]
initial
begin
	WA[0] = 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #10000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #10000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #10000 1'b0;
end 

// REA
initial
begin
	REA = 1'b1;
	REA = #160000 1'b0;
end 
// RAA[ 1 ]
initial
begin
	RAA[1] = 1'b0;
	RAA[1] = #20000 1'b1;
	RAA[1] = #10000 1'b0;
	RAA[1] = #10000 1'b1;
	RAA[1] = #10000 1'b0;
	RAA[1] = #20000 1'b1;
	RAA[1] = #10000 1'b0;
	RAA[1] = #20000 1'b1;
	RAA[1] = #10000 1'b0;
	RAA[1] = #20000 1'b1;
	RAA[1] = #10000 1'b0;
	RAA[1] = #10000 1'b1;
	RAA[1] = #10000 1'b0;
end 
// RAA[ 0 ]
initial
begin
	RAA[0] = 1'b0;
end 

// REB
initial
begin
	REB = 1'b0;
	REB = #10000 1'b1;
	REB = #10000 1'b0;
	REB = #10000 1'b1;
	REB = #130000 1'b0;
end 
// RBB[ 1 ]
initial
begin
	RBB[1] = 1'b0;
	RBB[1] = #40000 1'b1;
	RBB[1] = #10000 1'b0;
	RBB[1] = #20000 1'b1;
	RBB[1] = #10000 1'b0;
	RBB[1] = #20000 1'b1;
	RBB[1] = #10000 1'b0;
	RBB[1] = #20000 1'b1;
	RBB[1] = #10000 1'b0;
	RBB[1] = #10000 1'b1;
	RBB[1] = #10000 1'b0;
end 
// RBB[ 0 ]
initial
begin
	RBB[0] = 1'b0;
	RBB[0] = #30000 1'b1;
	RBB[0] = #20000 1'b0;
	RBB[0] = #10000 1'b1;
	RBB[0] = #20000 1'b0;
	RBB[0] = #10000 1'b1;
	RBB[0] = #20000 1'b0;
	RBB[0] = #10000 1'b1;
	RBB[0] = #20000 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
	S[2] = #10000 1'b1;
	S[2] = #20000 1'b0;
	S[2] = #10000 1'b1;
	S[2] = #10000 1'b0;
	S[2] = #20000 1'b1;
	S[2] = #10000 1'b0;
	S[2] = #20000 1'b1;
	S[2] = #10000 1'b0;
	S[2] = #20000 1'b1;
	S[2] = #10000 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
	S[1] = #10000 1'b1;
	S[1] = #20000 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
	S[0] = #20000 1'b1;
	S[0] = #120000 1'b0;
	S[0] = #10000 1'b1;
	S[0] = #10000 1'b0;
end 

// PASS
initial
begin
	PASS = 1'b1;
	PASS = #50000 1'b0;
	PASS = #10000 1'b1;
	PASS = #20000 1'b0;
	PASS = #10000 1'b1;
	PASS = #20000 1'b0;
	PASS = #10000 1'b1;
	PASS = #20000 1'b0;
	PASS = #10000 1'b1;
	PASS = #10000 1'b0;
end 

// OE
initial
begin
	OE = 1'b0;
	OE = #50000 1'b1;
	OE = #10000 1'b0;
	OE = #90000 1'b1;
	OE = #10000 1'b0;
end 

parallel_datapath_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DATA(DATA),
	.IE(IE),
	.OE(OE),
	.PASS(PASS),
	.RAA(RAA),
	.RBB(RBB),
	.REA(REA),
	.REB(REB),
	.S(S),
	.WA(WA),
	.WE(WE),
	.sampler_tx(sampler)
);

parallel_datapath_vlg_check_tst tb_out(
	.RESULT(RESULT),
	.sampler_rx(sampler)
);
endmodule


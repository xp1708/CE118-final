// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2024 15:18:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_sample_tst(
	CLK,
	RAA,
	RAB,
	REA,
	REB,
	WA,
	WD,
	WE,
	sampler_tx
);
input  CLK;
input [3:0] RAA;
input [3:0] RAB;
input  REA;
input  REB;
input [2:0] WA;
input [7:0] WD;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RAA or RAB or REA or REB or WA or WD or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile_vlg_check_tst (
	RDA,
	RDB,
	sampler_rx
);
input [7:0] RDA;
input [7:0] RDB;
input sampler_rx;

reg [7:0] RDA_expected;
reg [7:0] RDB_expected;

reg [7:0] RDA_prev;
reg [7:0] RDB_prev;

reg [7:0] RDA_expected_prev;
reg [7:0] RDB_expected_prev;

reg [7:0] last_RDA_exp;
reg [7:0] last_RDB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	RDA_prev = RDA;
	RDB_prev = RDB;
end

// update expected /o prevs

always @(trigger)
begin
	RDA_expected_prev = RDA_expected;
	RDB_expected_prev = RDB_expected;
end


// expected RDA[ 7 ]
initial
begin
	RDA_expected[7] = 1'bX;
end 
// expected RDA[ 6 ]
initial
begin
	RDA_expected[6] = 1'bX;
end 
// expected RDA[ 5 ]
initial
begin
	RDA_expected[5] = 1'bX;
end 
// expected RDA[ 4 ]
initial
begin
	RDA_expected[4] = 1'bX;
end 
// expected RDA[ 3 ]
initial
begin
	RDA_expected[3] = 1'bX;
end 
// expected RDA[ 2 ]
initial
begin
	RDA_expected[2] = 1'bX;
end 
// expected RDA[ 1 ]
initial
begin
	RDA_expected[1] = 1'bX;
end 
// expected RDA[ 0 ]
initial
begin
	RDA_expected[0] = 1'bX;
end 
// expected RDB[ 7 ]
initial
begin
	RDB_expected[7] = 1'bX;
end 
// expected RDB[ 6 ]
initial
begin
	RDB_expected[6] = 1'bX;
end 
// expected RDB[ 5 ]
initial
begin
	RDB_expected[5] = 1'bX;
end 
// expected RDB[ 4 ]
initial
begin
	RDB_expected[4] = 1'bX;
end 
// expected RDB[ 3 ]
initial
begin
	RDB_expected[3] = 1'bX;
end 
// expected RDB[ 2 ]
initial
begin
	RDB_expected[2] = 1'bX;
end 
// expected RDB[ 1 ]
initial
begin
	RDB_expected[1] = 1'bX;
end 
// expected RDB[ 0 ]
initial
begin
	RDB_expected[0] = 1'bX;
end 
// generate trigger
always @(RDA_expected or RDA or RDB_expected or RDB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RDA = %b | expected RDB = %b | ",RDA_expected_prev,RDB_expected_prev);
	$display("| real RDA = %b | real RDB = %b | ",RDA_prev,RDB_prev);
`endif
	if (
		( RDA_expected_prev[0] !== 1'bx ) && ( RDA_prev[0] !== RDA_expected_prev[0] )
		&& ((RDA_expected_prev[0] !== last_RDA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[0] = RDA_expected_prev[0];
	end
	if (
		( RDA_expected_prev[1] !== 1'bx ) && ( RDA_prev[1] !== RDA_expected_prev[1] )
		&& ((RDA_expected_prev[1] !== last_RDA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[1] = RDA_expected_prev[1];
	end
	if (
		( RDA_expected_prev[2] !== 1'bx ) && ( RDA_prev[2] !== RDA_expected_prev[2] )
		&& ((RDA_expected_prev[2] !== last_RDA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[2] = RDA_expected_prev[2];
	end
	if (
		( RDA_expected_prev[3] !== 1'bx ) && ( RDA_prev[3] !== RDA_expected_prev[3] )
		&& ((RDA_expected_prev[3] !== last_RDA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[3] = RDA_expected_prev[3];
	end
	if (
		( RDA_expected_prev[4] !== 1'bx ) && ( RDA_prev[4] !== RDA_expected_prev[4] )
		&& ((RDA_expected_prev[4] !== last_RDA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[4] = RDA_expected_prev[4];
	end
	if (
		( RDA_expected_prev[5] !== 1'bx ) && ( RDA_prev[5] !== RDA_expected_prev[5] )
		&& ((RDA_expected_prev[5] !== last_RDA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[5] = RDA_expected_prev[5];
	end
	if (
		( RDA_expected_prev[6] !== 1'bx ) && ( RDA_prev[6] !== RDA_expected_prev[6] )
		&& ((RDA_expected_prev[6] !== last_RDA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[6] = RDA_expected_prev[6];
	end
	if (
		( RDA_expected_prev[7] !== 1'bx ) && ( RDA_prev[7] !== RDA_expected_prev[7] )
		&& ((RDA_expected_prev[7] !== last_RDA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDA_expected_prev);
		$display ("     Real value = %b", RDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RDA_exp[7] = RDA_expected_prev[7];
	end
	if (
		( RDB_expected_prev[0] !== 1'bx ) && ( RDB_prev[0] !== RDB_expected_prev[0] )
		&& ((RDB_expected_prev[0] !== last_RDB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[0] = RDB_expected_prev[0];
	end
	if (
		( RDB_expected_prev[1] !== 1'bx ) && ( RDB_prev[1] !== RDB_expected_prev[1] )
		&& ((RDB_expected_prev[1] !== last_RDB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[1] = RDB_expected_prev[1];
	end
	if (
		( RDB_expected_prev[2] !== 1'bx ) && ( RDB_prev[2] !== RDB_expected_prev[2] )
		&& ((RDB_expected_prev[2] !== last_RDB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[2] = RDB_expected_prev[2];
	end
	if (
		( RDB_expected_prev[3] !== 1'bx ) && ( RDB_prev[3] !== RDB_expected_prev[3] )
		&& ((RDB_expected_prev[3] !== last_RDB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[3] = RDB_expected_prev[3];
	end
	if (
		( RDB_expected_prev[4] !== 1'bx ) && ( RDB_prev[4] !== RDB_expected_prev[4] )
		&& ((RDB_expected_prev[4] !== last_RDB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[4] = RDB_expected_prev[4];
	end
	if (
		( RDB_expected_prev[5] !== 1'bx ) && ( RDB_prev[5] !== RDB_expected_prev[5] )
		&& ((RDB_expected_prev[5] !== last_RDB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[5] = RDB_expected_prev[5];
	end
	if (
		( RDB_expected_prev[6] !== 1'bx ) && ( RDB_prev[6] !== RDB_expected_prev[6] )
		&& ((RDB_expected_prev[6] !== last_RDB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[6] = RDB_expected_prev[6];
	end
	if (
		( RDB_expected_prev[7] !== 1'bx ) && ( RDB_prev[7] !== RDB_expected_prev[7] )
		&& ((RDB_expected_prev[7] !== last_RDB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDB_expected_prev);
		$display ("     Real value = %b", RDB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RDB_exp[7] = RDB_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] RAA;
reg [3:0] RAB;
reg REA;
reg REB;
reg [2:0] WA;
reg [7:0] WD;
reg WE;
// wires                                               
wire [7:0] RDA;
wire [7:0] RDB;

wire sampler;                             

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.RAA(RAA),
	.RAB(RAB),
	.RDA(RDA),
	.RDB(RDB),
	.REA(REA),
	.REB(REB),
	.WA(WA),
	.WD(WD),
	.WE(WE)
);

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #40000 1'b1;
		# 40000;
	end
	CLK = 1'b0;
end 

// WE
initial
begin
	WE = 1'b1;
end 
// WA[ 2 ]
initial
begin
	WA[2] = 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #190000 1'b1;
	WA[1] = #40000 1'b0;
	WA[1] = #40000 1'b1;
	WA[1] = #40000 1'b0;
	WA[1] = #40000 1'b1;
	WA[1] = #40000 1'b0;
end 
// WA[ 0 ]
initial
begin
	WA[0] = 1'b0;
	WA[0] = #100000 1'b1;
	WA[0] = #50000 1'b0;
	WA[0] = #120000 1'b1;
	WA[0] = #40000 1'b0;
end 

// RAA[2]
initial
begin
	RAA[2] = 1'b0;
end 

// RAA[1]
initial
begin
	RAA[1] = 1'b0;
	RAA[1] = #310000 1'b1;
	RAA[1] = #70000 1'b0;
end 

// RAA[0]
initial
begin
	RAA[0] = 1'b0;
	RAA[0] = #100000 1'b1;
	RAA[0] = #140000 1'b0;
	RAA[0] = #70000 1'b1;
	RAA[0] = #70000 1'b0;
	RAA[0] = #40000 1'b1;
	RAA[0] = #60000 1'b0;
end 

// RAB[2]
initial
begin
	RAB[2] = 1'b0;
end 

// RAB[1]
initial
begin
	RAB[1] = 1'b0;
	RAB[1] = #250000 1'b1;
	RAB[1] = #150000 1'b0;
end 

// RAB[0]
initial
begin
	RAB[0] = 1'b0;
	RAB[0] = #220000 1'b1;
	RAB[0] = #20000 1'b0;
end 

// REA
initial
begin
	REA = 1'b1;
end 

// REB
initial
begin
	REB = 1'b1;
end 

RegisterFile_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RAA(RAA),
	.RAB(RAB),
	.REA(REA),
	.REB(REB),
	.WA(WA),
	.WD(WD),
	.WE(WE),
	.sampler_tx(sampler)
);

RegisterFile_vlg_check_tst tb_out(
	.RDA(RDA),
	.RDB(RDB),
	.sampler_rx(sampler)
);
endmodule


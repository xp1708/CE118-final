// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2024 15:41:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Data_Path
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Data_Path_vlg_sample_tst(
	CLK,
	DataIn,
	IE,
	OE,
	RAA,
	RAB,
	REA,
	REB,
	S_ALU1,
	S_shift,
	WA,
	WE,
	sampler_tx
);
input  CLK;
input [3:0] DataIn;
input  IE;
input  OE;
input [3:0] RAA;
input [3:0] RAB;
input  REA;
input  REB;
input [3:0] S_ALU1;
input [1:0] S_shift;
input [3:0] WA;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DataIn or IE or OE or RAA or RAB or REA or REB or S_ALU1 or S_shift or WA or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Data_Path_vlg_check_tst (
	Datapath,
	Out,
	sampler_rx
);
input  Datapath;
input [3:0] Out;
input sampler_rx;

reg  Datapath_expected;
reg [3:0] Out_expected;

reg  Datapath_prev;
reg [3:0] Out_prev;

reg  Datapath_expected_prev;
reg [3:0] Out_expected_prev;

reg  last_Datapath_exp;
reg [3:0] last_Out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Datapath_prev = Datapath;
	Out_prev = Out;
end

// update expected /o prevs

always @(trigger)
begin
	Datapath_expected_prev = Datapath_expected;
	Out_expected_prev = Out_expected;
end


// expected Out[ 3 ]
initial
begin
	Out_expected[3] = 1'bX;
end 
// expected Out[ 2 ]
initial
begin
	Out_expected[2] = 1'bX;
end 
// expected Out[ 1 ]
initial
begin
	Out_expected[1] = 1'bX;
end 
// expected Out[ 0 ]
initial
begin
	Out_expected[0] = 1'bX;
end 

// expected Datapath
initial
begin
	Datapath_expected = 1'bX;
end 
// generate trigger
always @(Datapath_expected or Datapath or Out_expected or Out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Datapath = %b | expected Out = %b | ",Datapath_expected_prev,Out_expected_prev);
	$display("| real Datapath = %b | real Out = %b | ",Datapath_prev,Out_prev);
`endif
	if (
		( Datapath_expected_prev !== 1'bx ) && ( Datapath_prev !== Datapath_expected_prev )
		&& ((Datapath_expected_prev !== last_Datapath_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Datapath :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Datapath_expected_prev);
		$display ("     Real value = %b", Datapath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Datapath_exp = Datapath_expected_prev;
	end
	if (
		( Out_expected_prev[0] !== 1'bx ) && ( Out_prev[0] !== Out_expected_prev[0] )
		&& ((Out_expected_prev[0] !== last_Out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out_exp[0] = Out_expected_prev[0];
	end
	if (
		( Out_expected_prev[1] !== 1'bx ) && ( Out_prev[1] !== Out_expected_prev[1] )
		&& ((Out_expected_prev[1] !== last_Out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out_exp[1] = Out_expected_prev[1];
	end
	if (
		( Out_expected_prev[2] !== 1'bx ) && ( Out_prev[2] !== Out_expected_prev[2] )
		&& ((Out_expected_prev[2] !== last_Out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out_exp[2] = Out_expected_prev[2];
	end
	if (
		( Out_expected_prev[3] !== 1'bx ) && ( Out_prev[3] !== Out_expected_prev[3] )
		&& ((Out_expected_prev[3] !== last_Out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out_exp[3] = Out_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Data_Path_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] DataIn;
reg IE;
reg OE;
reg [3:0] RAA;
reg [3:0] RAB;
reg REA;
reg REB;
reg [3:0] S_ALU1;
reg [1:0] S_shift;
reg [3:0] WA;
reg WE;
// wires                                               
wire Datapath;
wire [3:0] Out;

wire sampler;                             

// assign statements (if any)                          
Data_Path i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DataIn(DataIn),
	.Datapath(Datapath),
	.IE(IE),
	.OE(OE),
	.Out(Out),
	.RAA(RAA),
	.RAB(RAB),
	.REA(REA),
	.REB(REB),
	.S_ALU1(S_ALU1),
	.S_shift(S_shift),
	.WA(WA),
	.WE(WE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b1;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b1;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 

// IE
initial
begin
	IE = 1'b0;
	IE = #50000 1'b1;
	IE = #20000 1'b0;
end 
// WA[ 3 ]
initial
begin
	WA[3] = 1'b0;
end 
// WA[ 2 ]
initial
begin
	WA[2] = 1'b0;
	WA[2] = #170000 1'b1;
	WA[2] = #20000 1'b0;
	WA[2] = #100000 1'b1;
	WA[2] = #40000 1'b0;
	WA[2] = #80000 1'b1;
	WA[2] = #40000 1'b0;
	WA[2] = #80000 1'b1;
	WA[2] = #40000 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #90000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #20000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #60000 1'b1;
	WA[1] = #20000 1'b0;
	WA[1] = #100000 1'b1;
	WA[1] = #40000 1'b0;
	WA[1] = #80000 1'b1;
	WA[1] = #40000 1'b0;
	WA[1] = #80000 1'b1;
	WA[1] = #40000 1'b0;
end 
// WA[ 0 ]
initial
begin
	WA[0] = 1'b0;
	WA[0] = #50000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #100000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #20000 1'b1;
	WA[0] = #20000 1'b0;
	WA[0] = #60000 1'b1;
	WA[0] = #80000 1'b0;
	WA[0] = #40000 1'b1;
	WA[0] = #80000 1'b0;
	WA[0] = #40000 1'b1;
	WA[0] = #40000 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #50000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #320000 1'b0;
end 
// RAA[ 3 ]
initial
begin
	RAA[3] = 1'b0;
end 
// RAA[ 2 ]
initial
begin
	RAA[2] = 1'b0;
	RAA[2] = #210000 1'b1;
	RAA[2] = #20000 1'b0;
end 
// RAA[ 1 ]
initial
begin
	RAA[1] = 1'b0;
	RAA[1] = #170000 1'b1;
	RAA[1] = #20000 1'b0;
	RAA[1] = #140000 1'b1;
	RAA[1] = #40000 1'b0;
	RAA[1] = #40000 1'b1;
	RAA[1] = #80000 1'b0;
	RAA[1] = #80000 1'b1;
	RAA[1] = #40000 1'b0;
end 
// RAA[ 0 ]
initial
begin
	RAA[0] = 1'b0;
	RAA[0] = #250000 1'b1;
	RAA[0] = #20000 1'b0;
	RAA[0] = #20000 1'b1;
	RAA[0] = #120000 1'b0;
	RAA[0] = #40000 1'b1;
	RAA[0] = #160000 1'b0;
end 

// REA
initial
begin
	REA = 1'b0;
	REA = #90000 1'b1;
	REA = #20000 1'b0;
	REA = #20000 1'b1;
	REA = #20000 1'b0;
	REA = #20000 1'b1;
	REA = #20000 1'b0;
	REA = #20000 1'b1;
	REA = #20000 1'b0;
	REA = #20000 1'b1;
	REA = #20000 1'b0;
	REA = #20000 1'b1;
	REA = #320000 1'b0;
end 
// RAB[ 3 ]
initial
begin
	RAB[3] = 1'b0;
end 
// RAB[ 2 ]
initial
begin
	RAB[2] = 1'b0;
	RAB[2] = #330000 1'b1;
	RAB[2] = #40000 1'b0;
	RAB[2] = #80000 1'b1;
	RAB[2] = #40000 1'b0;
	RAB[2] = #80000 1'b1;
	RAB[2] = #40000 1'b0;
end 
// RAB[ 1 ]
initial
begin
	RAB[1] = 1'b0;
	RAB[1] = #210000 1'b1;
	RAB[1] = #20000 1'b0;
	RAB[1] = #60000 1'b1;
	RAB[1] = #40000 1'b0;
	RAB[1] = #200000 1'b1;
	RAB[1] = #40000 1'b0;
end 
// RAB[ 0 ]
initial
begin
	RAB[0] = 1'b0;
	RAB[0] = #170000 1'b1;
	RAB[0] = #20000 1'b0;
	RAB[0] = #20000 1'b1;
	RAB[0] = #20000 1'b0;
	RAB[0] = #180000 1'b1;
	RAB[0] = #40000 1'b0;
end 

// REB
initial
begin
	REB = 1'b0;
	REB = #90000 1'b1;
	REB = #20000 1'b0;
	REB = #60000 1'b1;
	REB = #20000 1'b0;
	REB = #20000 1'b1;
	REB = #20000 1'b0;
	REB = #20000 1'b1;
	REB = #20000 1'b0;
	REB = #20000 1'b1;
	REB = #320000 1'b0;
end 
// S_ALU1[ 3 ]
initial
begin
	S_ALU1[3] = 1'b0;
end 
// S_ALU1[ 2 ]
initial
begin
	S_ALU1[2] = 1'b0;
	S_ALU1[2] = #90000 1'b1;
	S_ALU1[2] = #20000 1'b0;
	S_ALU1[2] = #20000 1'b1;
	S_ALU1[2] = #20000 1'b0;
	S_ALU1[2] = #60000 1'b1;
	S_ALU1[2] = #20000 1'b0;
	S_ALU1[2] = #20000 1'b1;
	S_ALU1[2] = #20000 1'b0;
	S_ALU1[2] = #60000 1'b1;
	S_ALU1[2] = #80000 1'b0;
	S_ALU1[2] = #40000 1'b1;
	S_ALU1[2] = #80000 1'b0;
	S_ALU1[2] = #40000 1'b1;
	S_ALU1[2] = #40000 1'b0;
end 
// S_ALU1[ 1 ]
initial
begin
	S_ALU1[1] = 1'b0;
	S_ALU1[1] = #130000 1'b1;
	S_ALU1[1] = #20000 1'b0;
end 
// S_ALU1[ 0 ]
initial
begin
	S_ALU1[0] = 1'b0;
	S_ALU1[0] = #90000 1'b1;
	S_ALU1[0] = #20000 1'b0;
	S_ALU1[0] = #20000 1'b1;
	S_ALU1[0] = #20000 1'b0;
	S_ALU1[0] = #20000 1'b1;
	S_ALU1[0] = #20000 1'b0;
	S_ALU1[0] = #20000 1'b1;
	S_ALU1[0] = #20000 1'b0;
	S_ALU1[0] = #20000 1'b1;
	S_ALU1[0] = #20000 1'b0;
	S_ALU1[0] = #20000 1'b1;
	S_ALU1[0] = #320000 1'b0;
end 
// S_shift[ 1 ]
initial
begin
	S_shift[1] = 1'b0;
	S_shift[1] = #250000 1'b1;
	S_shift[1] = #20000 1'b0;
	S_shift[1] = #100000 1'b1;
	S_shift[1] = #40000 1'b0;
	S_shift[1] = #80000 1'b1;
	S_shift[1] = #40000 1'b0;
end 
// S_shift[ 0 ]
initial
begin
	S_shift[0] = 1'b0;
end 

// OE
initial
begin
	OE = 1'b1;
	OE = #660000 1'b0;
end 

Data_Path_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DataIn(DataIn),
	.IE(IE),
	.OE(OE),
	.RAA(RAA),
	.RAB(RAB),
	.REA(REA),
	.REB(REB),
	.S_ALU1(S_ALU1),
	.S_shift(S_shift),
	.WA(WA),
	.WE(WE),
	.sampler_tx(sampler)
);

Data_Path_vlg_check_tst tb_out(
	.Datapath(Datapath),
	.Out(Out),
	.sampler_rx(sampler)
);
endmodule


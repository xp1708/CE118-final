// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2024 07:24:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_quartus_new
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_quartus_new_vlg_sample_tst(
	KEY0,
	KEY1,
	SW0,
	SW1,
	SW2,
	sampler_tx
);
input  KEY0;
input  KEY1;
input  SW0;
input  SW1;
input  SW2;
output sampler_tx;

reg sample;
time current_time;
always @(KEY0 or KEY1 or SW0 or SW1 or SW2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_quartus_new_vlg_check_tst (
	LEDG1,
	LEDG2,
	LEGG0,
	sampler_rx
);
input  LEDG1;
input  LEDG2;
input  LEGG0;
input sampler_rx;

reg  LEDG1_expected;
reg  LEDG2_expected;
reg  LEGG0_expected;

reg  LEDG1_prev;
reg  LEDG2_prev;
reg  LEGG0_prev;

reg  LEDG1_expected_prev;
reg  LEDG2_expected_prev;
reg  LEGG0_expected_prev;

reg  last_LEDG1_exp;
reg  last_LEDG2_exp;
reg  last_LEGG0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDG1_prev = LEDG1;
	LEDG2_prev = LEDG2;
	LEGG0_prev = LEGG0;
end

// update expected /o prevs

always @(trigger)
begin
	LEDG1_expected_prev = LEDG1_expected;
	LEDG2_expected_prev = LEDG2_expected;
	LEGG0_expected_prev = LEGG0_expected;
end



// expected LEDG2
initial
begin
	LEDG2_expected = 1'bX;
end 

// expected LEDG1
initial
begin
	LEDG1_expected = 1'bX;
end 

// expected LEGG0
initial
begin
	LEGG0_expected = 1'bX;
end 
// generate trigger
always @(LEDG1_expected or LEDG1 or LEDG2_expected or LEDG2 or LEGG0_expected or LEGG0)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDG1 = %b | expected LEDG2 = %b | expected LEGG0 = %b | ",LEDG1_expected_prev,LEDG2_expected_prev,LEGG0_expected_prev);
	$display("| real LEDG1 = %b | real LEDG2 = %b | real LEGG0 = %b | ",LEDG1_prev,LEDG2_prev,LEGG0_prev);
`endif
	if (
		( LEDG1_expected_prev !== 1'bx ) && ( LEDG1_prev !== LEDG1_expected_prev )
		&& ((LEDG1_expected_prev !== last_LEDG1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG1_expected_prev);
		$display ("     Real value = %b", LEDG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG1_exp = LEDG1_expected_prev;
	end
	if (
		( LEDG2_expected_prev !== 1'bx ) && ( LEDG2_prev !== LEDG2_expected_prev )
		&& ((LEDG2_expected_prev !== last_LEDG2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG2_expected_prev);
		$display ("     Real value = %b", LEDG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDG2_exp = LEDG2_expected_prev;
	end
	if (
		( LEGG0_expected_prev !== 1'bx ) && ( LEGG0_prev !== LEGG0_expected_prev )
		&& ((LEGG0_expected_prev !== last_LEGG0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEGG0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEGG0_expected_prev);
		$display ("     Real value = %b", LEGG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEGG0_exp = LEGG0_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module test_quartus_new_vlg_vec_tst();
// constants                                           
// general purpose registers
reg KEY0;
reg KEY1;
reg SW0;
reg SW1;
reg SW2;
// wires                                               
wire LEDG1;
wire LEDG2;
wire LEGG0;

wire sampler;                             

// assign statements (if any)                          
test_quartus_new i1 (
// port map - connection between master ports and signals/registers   
	.KEY0(KEY0),
	.KEY1(KEY1),
	.LEDG1(LEDG1),
	.LEDG2(LEDG2),
	.LEGG0(LEGG0),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2)
);

// KEY0
initial
begin
	repeat(12)
	begin
		KEY0 = 1'b0;
		KEY0 = #40000 1'b1;
		# 40000;
	end
	KEY0 = 1'b0;
end 

// KEY1
initial
begin
	KEY1 = 1'b1;
	KEY1 = #40000 1'b0;
end 

// SW2
initial
begin
	SW2 = 1'b1;
	SW2 = #40000 1'b0;
end 

// SW1
initial
begin
	SW1 = 1'b0;
end 

// SW0
initial
begin
	SW0 = 1'b0;
end 

test_quartus_new_vlg_sample_tst tb_sample (
	.KEY0(KEY0),
	.KEY1(KEY1),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.sampler_tx(sampler)
);

test_quartus_new_vlg_check_tst tb_out(
	.LEDG1(LEDG1),
	.LEDG2(LEDG2),
	.LEGG0(LEGG0),
	.sampler_rx(sampler)
);
endmodule

